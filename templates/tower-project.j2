AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Stack for provisioning the AWS resources needed for
  configuring compute environments in Nextflow Tower.

Parameters:
  S3ReadWriteAccessArns:
    Type: List<String>
    Default: ""
    Description: >-
      (Optional) List of IAM users and roles (strings) who
      should have read- and write-access to the S3 bucket.
      These ARNs will also have access to the configuration
      secret. You can provide role ARNs or assumed-role ARNs.

  S3ReadOnlyAccessArns:
    Type: List<String>
    Default: ""
    Description: >-
      (Optional) List of IAM users and roles (strings)
      who should only have read-access to the S3 bucket.
      These ARNs will also have access to the configuration
      secret. You can provide role ARNs or assumed-role ARNs.

  AllowSynapseIndexing:
    Type: String
    Description: >-
      'Enabled' to allow Synapse indexing on the long-term (archival) bucket.
      Default is 'Enabled'.
    AllowedValues:
      - Enabled
      - Disabled
    Default: Enabled

  EnableScratchDataExpiration:
    Type: String
    Description: >-
      'Enabled' to auto-delete objects/files in the short-term (scratch) bucket
      based on the top-level folder (e.g., `10days`). Default is 'Enabled'.
    AllowedValues:
      - Enabled
      - Disabled
    Default: Enabled

  # TODO: Remove lifecycle transition params
  ScratchLifecycleTransition:
    Type: Number
    Description: >-
      Number of days until S3 objects in the short-term (scratch) bucket are
      moved to ScratchLifecycleStorageClass. This is not related to data
      expiration (i.e., auto-deletion of files). Default is 10 days.
    Default: 10

  ScratchLifecycleStorageClass:
    Type: String
    Description: >-
      S3 bucket objects in the short-term (scratch) bucket will transition into this
      storage class after a number of days specified by ScratchLifecycleTransition.
    AllowedValues:
      - DEEP_ARCHIVE
      - INTELLIGENT_TIERING
      - STANDARD_IA
      - ONEZONE_IA
      - GLACIER
    Default: INTELLIGENT_TIERING

  AccountAdminArns:
    Type: List<String>
    Description: >-
      List of IAM user and role ARNs (strings) who should have access to
      project-specific resources (e.g., private S3 bucket, KMS key, secrets).

  TemplateRootUrl:
    Type: String
    Description: URL of S3 bucket where templates are deployed
    ConstraintDescription: Must be a valid S3 HTTP URL

  TowerForgePolicyArn:
    Type: String
    Description: ARN for Tower Forge IAM policy

  TowerLaunchPolicyArn:
    Type: String
    Description: ARN for Tower Launch IAM policy

Conditions:
  HasS3ReadWriteAccessArns:
    !Not [!Equals [!Join [",", !Ref S3ReadWriteAccessArns], ""]]
  HasS3ReadOnlyAccessArns:
    !Not [!Equals [!Join [",", !Ref S3ReadOnlyAccessArns], ""]]
  SynapseIndexingEnabled: !Equals [!Ref AllowSynapseIndexing, "Enabled"]

Resources:
  TowerForgeServiceUser:
    Type: AWS::IAM::User

  TowerForgeServiceUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref TowerForgeServiceUser

  TowerForgeServiceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref TowerForgePolicyArn
        - !Ref TowerLaunchPolicyArn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS: !GetAtt TowerForgeServiceUser.Arn
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS: !Ref AccountAdminArns

  TowerForgeBatchHeadJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com

  TowerForgeBatchWorkJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com

  TowerRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - 'Fn::ImportValue': !Sub ${AWS::Region}-nextflow-forge-iam-policy-NextFlowForgePolicyArn
        - 'Fn::ImportValue': !Sub ${AWS::Region}-nextflow-launch-iam-policy-NextFlowLaunchPolicyArn
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
          - Sid: AllowEc2AssumeRole
            Effect: Allow
            Principal:
              AWS: !Ref AccountAdminArns
            Action: sts:AssumeRole
          - Sid: AllowEcsServiceRole2AssumeRole
            Effect: Allow
            Principal:
              AWS:
                - 'Fn::ImportValue': !Sub ${AWS::Region}-nextflow-ecs-service-shared-EcsServiceRoleArn
            Action: sts:AssumeRole

  TowerForgeBatchHeadJobPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TowerForgeBucketAccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: NextflowConfig
            Effect: Allow
            Action:
              - batch:DescribeJobQueues
              - batch:CancelJob
              - batch:SubmitJob
              - batch:ListJobs
              - batch:DescribeComputeEnvironments
              - batch:TerminateJob
              - batch:DescribeJobs
              - batch:RegisterJobDefinition
              - batch:DescribeJobDefinitions
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceTypes
              - ec2:DescribeInstanceStatus
              - secretsmanager:ListSecrets
              - logs:GetLogEvents
              - batch:TagResource
            Resource: "*"
          - Sid: IAMConfig
            Effect: Allow
            Action:
              - iam:GetRole
              - iam:PassRole
            Resource:
              - !GetAtt TowerForgeBatchWorkJobRole.Arn
              - !GetAtt TowerForgeBatchExecutionRole.Arn
      Roles:
        - !Ref TowerForgeBatchHeadJobRole

  TowerForgeExternalS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TowerForgeExternalS3AccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ConditionalAmazonS3ReadWriteAccess
            Effect: Allow
            Action:
              - "s3:Get*"
              - "s3:List*"
              - "s3:PutObject*"
              - "s3:DeleteObject*"
              - "s3:*MultipartUpload*"
              - "s3-object-lambda:Get*"
              - "s3-object-lambda:List*"
            Resource: "*"
            Condition:
              StringNotEquals:
                s3:ResourceAccount:
                  - !Sub "${AWS::AccountId}"
      Roles:
        - !Ref TowerForgeBatchHeadJobRole
        - !Ref TowerForgeBatchWorkJobRole

  TowerForgeBatchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com

  TowerForgeBatchExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TowerForgeBatchExecutionSecretAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: TowerForgeBatchExecutionSecretAccess
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: "arn:aws:secretsmanager:*:*:secret:tower-*"
      Roles:
        - !Ref TowerForgeBatchExecutionRole

  EncryptionKeyStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateRootUrl}/aws-infra/v0.4.6/KMS/kms-key.yaml
      TimeoutInMinutes: 5
      Parameters:
        AliasName: !Sub "alias/${AWS::StackName}-EncryptionKey"
        AdminPrincipalArns: !Join
          - ","
          - - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            - !Join
              - ","
              - !Ref AccountAdminArns
        UserPrincipalArns: !Join
          - ","
          - - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            - !GetAtt TowerForgeBatchHeadJobRole.Arn
            - !GetAtt TowerForgeBatchWorkJobRole.Arn
            - !GetAtt TowerForgeServiceRole.Arn
            - !Join
              - ","
              - !Ref AccountAdminArns
            - !If
              - HasS3ReadWriteAccessArns
              - !Join
                - ","
                - !Ref S3ReadWriteAccessArns
              - !Ref AWS::NoValue
            - !If
              - HasS3ReadOnlyAccessArns
              - !Join
                - ","
                - !Ref S3ReadOnlyAccessArns
              - !Ref AWS::NoValue
            - !If
              - SynapseIndexingEnabled
              - "arn:aws:iam::325565585839:root"
              - !Ref AWS::NoValue

  TowerLaunchStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateRootUrl}/aws-infra/v0.7.4/NextflowTower/nextflow-launch.yaml
      TimeoutInMinutes: 5
      Parameters:
        EcsSecurityGroupId: !Sub '!ImportValue ${AWS::Region}-nextflow-ecs-security-group-SecurityGroupId'
        SubnetId: !Sub '!ImportValue ${AWS::Region}-nextflow-vpc-PrivateSubnet'

  TowerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-tower-bucket"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt EncryptionKeyStack.Outputs.KeyArn
      LifecycleConfiguration:
        Rules:
          - Id: IntelligentDataLifecycleRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: INTELLIGENT_TIERING
      CorsConfiguration:
        CorsRules:
          - !If
            - SynapseIndexingEnabled
            - Id: SynapseCORSRule
              AllowedHeaders: ["*"]
              AllowedOrigins: ["*"]
              AllowedMethods: [GET, POST, PUT, HEAD]
              MaxAge: 3000
            - Id: NullCorsRule
              AllowedHeaders: [""]
              AllowedOrigins: [""]
              AllowedMethods: ["GET"]
              MaxAge: 0

  TowerBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TowerBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyCrossProjectAccess
            Effect: Deny
            Principal:
              AWS: "*"
            Action:
              - "s3:*"
            Condition:
              ArnLike:
                aws:PrincipalArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/TowerForge-*"
            Resource:
              - !Sub "arn:aws:s3:::${TowerBucket}"
              - !Sub "arn:aws:s3:::${TowerBucket}/*"
          - Sid: TowerForgeRoleS3Access
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt TowerForgeServiceRole.Arn
                - !GetAtt TowerForgeBatchHeadJobRole.Arn
                - !GetAtt TowerForgeBatchWorkJobRole.Arn
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:PutObjectTagging"
              - "s3:DeleteObject"
              - "s3:*MultipartUpload*"
            Resource:
              - !Sub "arn:aws:s3:::${TowerBucket}"
              - !Sub "arn:aws:s3:::${TowerBucket}/*"
          - !If
            - HasS3ReadWriteAccessArns
            - Sid: GrantReadWriteAccessToS3ReadWriteAccessArns
              Effect: Allow
              Principal:
                AWS: !Ref S3ReadWriteAccessArns
              Action:
                - "s3:GetObject*"
                - "s3:PutObject*"
                - "s3:DeleteObject*"
                - "s3:*MultipartUpload*"
                - "s3:ListBucket*"
                - "s3:GetBucketLocation"
              Resource:
                - !Sub "arn:aws:s3:::${TowerBucket}"
                - !Sub "arn:aws:s3:::${TowerBucket}/*"
            - !Ref AWS::NoValue
          - !If
            - HasS3ReadOnlyAccessArns
            - Sid: GrantReadAccessToS3ReadOnlyAccessArns
              Effect: Allow
              Principal:
                AWS: !Ref S3ReadOnlyAccessArns
              Action:
                - "s3:ListBucket*"
                - "s3:GetBucketLocation"
                - "s3:GetObject"
                - "s3:GetObjectAcl"
              Resource:
                - !Sub "arn:aws:s3:::${TowerBucket}"
                - !Sub "arn:aws:s3:::${TowerBucket}/*"
            - !Ref AWS::NoValue
          - !If
            - SynapseIndexingEnabled
            - Sid: GrantBucketReadAccessToSynapse
              Effect: Allow
              Principal:
                AWS: "arn:aws:iam::325565585839:root" # Synapse Account
              Action:
                - "s3:ListBucket"
                - "s3:GetBucketLocation"
              Resource:
                - !Sub "arn:aws:s3:::${TowerBucket}"
            - !Ref AWS::NoValue
          - !If
            - SynapseIndexingEnabled
            - Sid: GrantObjectReadAccessToSynapse
              Effect: Allow
              Principal:
                AWS: "arn:aws:iam::325565585839:root" # Synapse Account
              Action:
                - "s3:GetObject"
              Resource:
                - !Sub "arn:aws:s3:::${TowerBucket}/*"
            - !Ref AWS::NoValue

  TowerScratch:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-tower-scratch"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt EncryptionKeyStack.Outputs.KeyArn
      LifecycleConfiguration:
        Rules:
          - Id: LifecycleStorageClassTransition
            Status: Enabled
            Transitions:
              - TransitionInDays: !Ref ScratchLifecycleTransition
                StorageClass: !Ref ScratchLifecycleStorageClass
          - Id: DataExpirationForWorkDirectory
            Status: !Ref EnableScratchDataExpiration
            ExpirationInDays: 30
            Prefix: work/
          {%- set default_scratch_data_expirations = [1, 3, 5, 7, 10, 20, 30, 60, 90] %}
          {%- set scratch_data_expirations = sceptre_user_data.scratch_data_expirations | default( default_scratch_data_expirations ) %}
          {%- for num in scratch_data_expirations %}
          - Id: DataExpirationFor{{ num }}DaysDirectory
            Status: !Ref EnableScratchDataExpiration
            ExpirationInDays: {{ num }}
            Prefix: {{ num }}days/
          {%- endfor %}
          # max(scratch_data_expirations) (e.g., 90 days) will appear twice. This doesn't
          # change the end result. This decision was made to avoid writing the logic to
          # exclude the max duration from the above for-loop.
          - Id: DataExpirationForEntireBucket
            Status: !Ref EnableScratchDataExpiration
            ExpirationInDays: {{ scratch_data_expirations | max }}

  TowerScratchPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TowerScratch
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyCrossProjectAccess
            Effect: Deny
            Principal:
              AWS: "*"
            Action:
              - "s3:*"
            Condition:
              ArnLike:
                aws:PrincipalArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/TowerForge-*"
            Resource:
              - !Sub "arn:aws:s3:::${TowerScratch}"
              - !Sub "arn:aws:s3:::${TowerScratch}/*"
          - Sid: TowerForgeRoleS3Access
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt TowerForgeServiceRole.Arn
                - !GetAtt TowerForgeBatchHeadJobRole.Arn
                - !GetAtt TowerForgeBatchWorkJobRole.Arn
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
              - "s3:GetObject"
              - "s3:DeleteObject"
              - "s3:PutObject"
              - "s3:PutObjectTagging"
              - "s3:*MultipartUpload*"
            Resource:
              - !Sub "arn:aws:s3:::${TowerScratch}"
              - !Sub "arn:aws:s3:::${TowerScratch}/*"
          - !If
            - HasS3ReadWriteAccessArns
            - Sid: GrantReadWriteAccessToS3ReadWriteAccessArns
              Effect: Allow
              Principal:
                AWS: !Ref S3ReadWriteAccessArns
              Action:
                - "s3:GetObject*"
                - "s3:ListBucket*"
                - "s3:GetBucketLocation"
                - "s3:DeleteObject*"
                - "s3:PutObject*"
                - "s3:*MultipartUpload*"
              Resource:
                - !Sub "arn:aws:s3:::${TowerScratch}"
                - !Sub "arn:aws:s3:::${TowerScratch}/*"
            - !Ref AWS::NoValue
          - !If
            - HasS3ReadOnlyAccessArns
            - Sid: GrantReadAccessToS3ReadOnlyAccessArns
              Effect: Allow
              Principal:
                AWS: !Ref S3ReadOnlyAccessArns
              Action:
                - "s3:ListBucket*"
                - "s3:GetBucketLocation"
                - "s3:GetObject"
                - "s3:GetObjectAcl"
              Resource:
                - !Sub "arn:aws:s3:::${TowerScratch}"
                - !Sub "arn:aws:s3:::${TowerScratch}/*"
            - !Ref AWS::NoValue

  TowerForgeServiceUserAccessKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub "AWS credentials for the ${TowerForgeServiceUser} IAM user"
      SecretString: !Sub >-
        {
          "aws_access_key_id":      "${TowerForgeServiceUserAccessKey}",
          "aws_secret_access_key":  "${TowerForgeServiceUserAccessKey.SecretAccessKey}"
        }
      KmsKeyId: !GetAtt EncryptionKeyStack.Outputs.Key

Outputs:
  S3ReadWriteAccessArns:
    Condition: HasS3ReadWriteAccessArns
    Value: !Join [",", !Ref S3ReadWriteAccessArns]
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-S3ReadWriteAccessArns"

  S3ReadOnlyAccessArns:
    Condition: HasS3ReadOnlyAccessArns
    Value: !Join [",", !Ref S3ReadOnlyAccessArns]
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-S3ReadOnlyAccessArns"

  TowerBucket:
    Value: !Ref TowerBucket
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerBucket"

  TowerBucketArn:
    Value: !GetAtt TowerBucket.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerBucketArn"

  TowerScratch:
    Value: !Ref TowerScratch
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerScratch"

  TowerScratchArn:
    Value: !GetAtt TowerScratch.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerScratchArn"

  TowerForgeServiceUser:
    Value: !Ref TowerForgeServiceUser
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUser"

  TowerForgeServiceUserArn:
    Value: !GetAtt TowerForgeServiceUser.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUserArn"

  TowerForgeServiceRole:
    Value: !Ref TowerForgeServiceRole
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceRole"

  TowerForgeServiceRoleArn:
    Value: !GetAtt TowerForgeServiceRole.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceRoleArn"

  TowerRoleArn:
    Value: !GetAtt TowerRole.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerRoleArn"

  TowerForgeBatchHeadJobRole:
    Value: !Ref TowerForgeBatchHeadJobRole
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeBatchHeadJobRole"

  TowerForgeBatchHeadJobRoleArn:
    Value: !GetAtt TowerForgeBatchHeadJobRole.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeBatchHeadJobRoleArn"

  TowerForgeBatchWorkJobRole:
    Value: !Ref TowerForgeBatchWorkJobRole
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeBatchWorkJobRole"

  TowerForgeBatchWorkJobRoleArn:
    Value: !GetAtt TowerForgeBatchWorkJobRole.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeBatchWorkJobRoleArn"

  TowerForgeBatchExecutionRole:
    Value: !Ref TowerForgeBatchExecutionRole
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeBatchExecutionRole"

  TowerForgeBatchExecutionRoleArn:
    Value: !GetAtt TowerForgeBatchExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeBatchExecutionRoleArn"

  TowerForgeServiceUserAccessKeySecret:
    Value: !Sub "${AWS::StackName}-TowerProjectConfiguration"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUserAccessKeySecret"

  TowerForgeServiceUserAccessKeySecretArn:
    Value: !Ref TowerForgeServiceUserAccessKeySecret
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-TowerForgeServiceUserAccessKeySecretArn"
