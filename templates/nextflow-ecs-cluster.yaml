AWSTemplateFormatVersion: 2010-09-09

Description: ECS Cluster for NextFlow Tower

Parameters:

  EcsClusterName:
    Type: String
    Description: >
      Specifies the ECS Cluster Name with which the resources would be
      associated
    Default: 'nf-tower'

  EcsAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Specifies the AMI ID for your container instances.
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'

  EcsInstanceType:
    Type: String
    Description: Specifies the EC2 instance type for your container instances.
    Default: 'c4.2xlarge'

  EcsSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group ID for ECS cluster to grant database access

  SubnetId:
    Type: String
    Description: The VPC subnet where ECS instances will run.

  AutoscalingGroupMaxSize:
    Type: String
    Description: (Optional) Limit on number of ECS cluster instances
      Defaults to 2.
    Default: '2'

  AutoscalingGroupDesiredCapacity:
    Type: String
    Description: (Optional) Ideal number of ECS cluster instances
      Defaults to 0.
    Default: '0'

  RootEbsVolumeSize:
    Type: Number
    Description: (Optional) Specifies the Size in GBs of the root EBS volume
    Default: 30

  EbsVolumeType:
    Type: String
    Description: (Optional) Specifies the Type of (Amazon EBS) volume.
    AllowedValues:
      - io1
      - gp2
      - sc1
      - st1
      - standard
    ConstraintDescription: Must be a valid EC2 volume type.
    Default: 'gp2'

  RootDeviceName:
    Type: String
    Description: (Optional) Specifies the device mapping for the root EBS volume.
    Default: '/dev/xvda'

Resources:

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - !Ref EcsCapacityProvider

  EcsCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref EcsAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 1
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED

  EcsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EcsRole

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

  EcsLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref EcsAmiId
        InstanceType: !Ref EcsInstanceType
        IamInstanceProfile:
          Arn: !GetAtt EcsInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref EcsSecurityGroupId
        BlockDeviceMappings:
          - DeviceName: !Ref RootDeviceName
            Ebs:
              VolumeSize: !Ref RootEbsVolumeSize
              VolumeType: !Ref EbsVolumeType
        UserData:
          Fn::Base64: !Sub |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="

            --==BOUNDARY==
            Content-Type: text/cloud-config; charset="us-ascii"

            #cloud-config
            repo_update: true
            repo_upgrade: security

            write_files:
            - path: /etc/ecs/ecs.config
              content: |
                ECS_CLUSTER=${EcsClusterName}
                ECS_IMAGE_PULL_BEHAVIOR=prefer-cached
              append: true

            --==BOUNDARY==--

  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchTemplate:
        LaunchTemplateId: !Ref EcsLaunchTemplate
        Version: !GetAtt EcsLaunchTemplate.LatestVersionNumber
      MinSize: '0'
      MaxSize: !Ref AutoscalingGroupMaxSize
      DesiredCapacity: !Ref AutoscalingGroupDesiredCapacity
      NewInstancesProtectedFromScaleIn: true
      MetricsCollection:
        - Granularity: 1Minute
      Tags:
        - Key: ManagedInstanceMaintenanceTarget
          PropagateAtLaunch: true
          Value: 'Yes'
        - Key: PatchGroup
          PropagateAtLaunch: true
          Value: 'prod-default'

Outputs:

  EcsClusterName:
    Value: !Ref EcsCluster
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsClusterName'

  EcsCapacityProviderName:
    Value: !Ref EcsCapacityProvider
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsCapacityProviderName'

  EcsRoleArn:
    Value: !GetAtt EcsRole.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsRoleArn'

  EcsLaunchTemplateName:
    Value: !Ref EcsLaunchTemplate
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsLaunchTemplate'

  EcsLaunchTemplateLatestVersionNumber:
    Value: !GetAtt EcsLaunchTemplate.LatestVersionNumber
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsLaunchTemplateLatestVersionNumber'

  EcsAutoScalingGroupName:
    Value: !Ref EcsAutoScalingGroup
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsAutoScalingGroupName'

  EcsAutoScalingGroupSubnetId:
    Value: !Ref SubnetId
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EcsAutoScalingGroupSubnetId'
